wf <- head(wf[order(wf$Freq,decreasing = T),],30)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wc.jpg", width = 1000, height = 1000, quality = 100)
p=wordcloud(words=wf$vc,freq = wf$Freq, min.freq = 1, max.words=200,
random.order=F, color=pal,scale = c(12,1), rot.per = 0.1)
print(p)
dev.off()
}else{
jpeg(filename = "wcbar.jpg", width = 680, height = 680, quality = 100)
order<-head(wf[order(wf$Freq),],30)
order<-order$vc;
p<-ggplot(
data=wf,
aes(x=wf$vc, y=wf$Freq))+
ylim(0,40)+
geom_col()+
coord_flip()+
scale_x_discrete(limit=order)+
geom_text(aes(label=wf$freq), hjust=-0.3);
print(p)
dev.off()
}
}
wc(2)
wf
wc(1)
wc(2)
wc<- function(a){
if(a==1){ #wordcloud
wf <- head(wf[order(wf$Freq,decreasing = T),],30)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wc.jpg", width = 1000, height = 1000, quality = 100)
p=wordcloud(words=wf$vc,freq = wf$Freq, min.freq = 1, max.words=200,
random.order=F, color=pal,scale = c(12,1), rot.per = 0.1)
print(p)
dev.off()
}else{
jpeg(filename = "wcbar.jpg", width = 680, height = 680, quality = 100)
order<-head(wf[order(wf$Freq),],30)
order<-order$vc;
p<-ggplot(
data=wf,
aes(x=wf$vc, y=wf$Freq))+
ylim(0,200)+
geom_col()+
coord_flip()+
scale_x_discrete(limit=order)+
geom_text(aes(label=wf$freq), hjust=-0.3);
print(p)
dev.off()
}
}
wc(2)
wc<- function(a){
if(a==1){ #wordcloud
wf <- head(wf[order(wf$Freq,decreasing = T),],30)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wc.jpg", width = 1000, height = 1000, quality = 100)
p=wordcloud(words=wf$vc,freq = wf$Freq, min.freq = 1, max.words=200,
random.order=F, color=pal,scale = c(12,1), rot.per = 0.1)
print(p)
dev.off()
}else{
jpeg(filename = "wcbar.jpg", width = 680, height = 680, quality = 100)
order<-head(wf[order(wf$Freq),],30)
order<-order$vc;
p<-ggplot(
data=wf,
aes(x=wf$vc))+
ylim(0,40)+
geom_col()+
coord_flip()+
scale_x_discrete(limit=order)+
geom_text(aes(label=wf$freq), hjust=-0.3);
print(p)
dev.off()
}
}
wc(2)
wc<- function(a){
if(a==1){ #wordcloud
wf <- head(wf[order(wf$Freq,decreasing = T),],30)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wc.jpg", width = 1000, height = 1000, quality = 100)
p=wordcloud(words=wf$vc,freq = wf$Freq, min.freq = 1, max.words=200,
random.order=F, color=pal,scale = c(12,1), rot.per = 0.1)
print(p)
dev.off()
}else{
jpeg(filename = "wcbar.jpg", width = 680, height = 680, quality = 100)
order<-head(wf[order(wf$Freq),],30)
order<-order$vc;
p<-ggplot(
data=wf,
aes(x=wf$vc))+
geom_col()+
coord_flip()+
scale_x_discrete(limit=order)+
geom_text(aes(label=wf$freq), hjust=-0.3);
print(p)
dev.off()
}
}
wc(2)
order
order
source('C:/Rproject/day07/r3.R', encoding = 'UTF-8', echo=TRUE)
wc(2)
source('C:/Rproject/day07/r3.R', encoding = 'UTF-8', echo=TRUE)
wc(2)
source('C:/Rproject/day07/r3.R', encoding = 'UTF-8', echo=TRUE)
wc(1)
wc(2)
wc<- function(a){
if(a==1){ #wordcloud
wf <- head(wf[order(wf$Freq,decreasing = T),],30)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wc.jpg", width = 1000, height = 1000, quality = 100)
p=wordcloud(words=wf$vc,freq = wf$Freq, min.freq = 1, max.words=200,
random.order=F, color=pal,scale = c(12,1), rot.per = 0.1)
print(p)
dev.off()
}else{
library(ggplot2)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wcbar.jpg", width = 1000, height = 1000, quality = 100)
order <- arrange(wf, Freq)$vc
p =  ggplot(data = wf, aes(x = vc, y = Freq)) +
ylim(0, 100) +
geom_col() +
coord_flip() +
scale_x_discrete(limit = order) +
geom_text(aes(label = Freq), hjust = -0.3)
print(p);
dev.off();
}
}
wc(2)
wc<- function(a){
if(a==1){ #wordcloud
wf <- head(wf[order(wf$Freq,decreasing = T),],30)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wc.jpg", width = 1000, height = 1000, quality = 100)
p=wordcloud(words=wf$vc,freq = wf$Freq, min.freq = 1, max.words=200,
random.order=F, color=pal,scale = c(12,1), rot.per = 0.1)
print(p)
dev.off()
}else{
library(ggplot2)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wcbar.jpg", width = 1000, height = 1000, quality = 100)
order <- arrange(wf, Freq)$vc
p =  ggplot(data = wf, aes(x = vc, y = Freq)) +
ylim(0, 40) +
geom_col() +
coord_flip() +
scale_x_discrete(limit = order) +
geom_text(aes(label = Freq), hjust = -0.3)
print(p);
dev.off();
}
}
wc(2)
wc<- function(a){
if(a==1){ #wordcloud
wf <- head(wf[order(wf$Freq,decreasing = T),],30)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wc.jpg", width = 1000, height = 1000, quality = 100)
p=wordcloud(words=wf$vc,freq = wf$Freq, min.freq = 1, max.words=200,
random.order=F, color=pal,scale = c(12,1), rot.per = 0.1)
print(p)
dev.off()
}else{
library(ggplot2)
pal<-brewer.pal(7,'Set1');
set.seed(1234);
jpeg(filename = "wcbar.jpg", width = 1000, height = 1000, quality = 100)
order <- arrange(wf, Freq)$vc
p =  ggplot(data = wf, aes(x = vc, y = Freq)) +
ylim(0, 50) +
geom_col() +
coord_flip() +
scale_x_discrete(limit = order) +
geom_text(aes(label = Freq), hjust = -0.3)
print(p);
dev.off();
}
}
wc(2)
install.packages("ggiraphExtra")
install.packages("stringi")
install.packages("stringi")
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
kopop1
kopop1
korpop1
changeCode(korpop1)
str(korpop1)
str(changeCode(korpop1))
kormap1<-rename(kormap1, pop=총인구_명,name=행정구역별_읍면동)
str(changeCode(korpop1))
ggChoropleth(
data=korpop1,
aes(),
map=kormap1,
interactive=T
)
library(dplyr)
kormap1<-rename(kormap1,
pop=총인구_명,
name=행정구역별_읍면동
)
korpop1<-rename(korpop1,
pop= 총인구_명,
namme=행정구역별_읍면동
)
str(changeCode(kormap1))
ggChoropleth(
data=korpop1,
aes(fill=pop, map_id=code, tooltip=name),map=kormap1,interactive=T)
devtools::install_github("cardiomoon/moonBook2")
library(moonBook2)
ggChoropleth(
data=korpop1,
aes(fill=pop, map_id=code, tooltip=name),map=kormap1,interactive=T)
source('C:/Rproject/day07/r4.R', encoding = 'UTF-8', echo=TRUE)
korpop1<-rename(korpop1,
pop= 총인구_명,
namme=행정구역별_읍면동
)
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
devtools::install_github("cardiomoon/kormaps2014")
devtools::install_github("cardiomoon/moonBook2")
library(kormaps2014)
library(dplyr)
library(moonBook2)
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
source('C:/Rproject/day07/r4.R', encoding = 'UTF-8', echo=TRUE)
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
kormap1 <-rename(
kormap1,
pop=총인구_명,
name=행정구역별_읍면동
)
source('C:/Rproject/day07/r4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Rproject/day07/r4.R', encoding = 'UTF-8', echo=TRUE)
library(moonBook2)
library(kormaps2014)
library(dplyr)
library(stringi)
source('C:/Rproject/day07/r4.R', encoding = 'UTF-8', echo=TRUE)
#install.packages("stringi")
#대한민국 지도를 다운로드
#install.packages("devtools")
library(moonBook2)
library(kormaps2014)
library(dplyr)
library(stringi)
str(changeCode(korpop1))
ggChoropleth(data=kopop1, aes(fill=pop, map_id=code, tooltip=name),map=kormap1,interactive=T)
ggChoropleth()
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
ggChoropleth(korpop2,kormap2,fillvar="남자_명")
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
ggChoropleth(korpop2,kormap2,fillvar="남자_명")
source('C:/Rproject/day07/r4.R', encoding = 'UTF-8', echo=TRUE)
install.packages("kormaps2014")
install.packages("kormaps2014")
korpop1
korpop1<-rename(korpop1, pop=총인구_명, name=행정구역별_읍면동)
# 인코딩을 CP949로 바꿈
str(changeCode(korpop1))
str(changeCode(kormap1))
options(encoding="UTF-8")
ggChoropleth(data=korpop1, aes(fill=pop,
map_id=code,
tooltip=name),
map=kormap1, interactive=T)
library(moonBook2)
# 인코딩을 CP949로 바꿈
str(changeCode(korpop1))
str(changeCode(kormap1))
options(encoding="UTF-8")
ggChoropleth(data=korpop1, aes(fill=pop,
map_id=code,
tooltip=name),
map=kormap1, interactive=T)
install.packages('ggiraphExtra')
source('C:/Rproject/day07/r4.R', encoding = 'UTF-8', echo=TRUE)
str(changeCode(korpop1))
library(moonBook2)
library(kormaps2014)
library(dplyr)
library(stringi)
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
library(ggplot2)
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
install.packages("RgoogleMaps")
library(RgoogleMaps)
library(RgoogleMaps)
mycenter=c(37.501246,127.039459)
mymap<-GetMap(
center = mycenter,
zoom = 11,
maptype = 'load',
format = 'roadmap',
destfile = 'mymap.jpg'
)
PlotOnStaticMap(mymap,
lat=37.501246,
lon = 127.039459 ,
destfile = 'mymap_point.jpg',
cex=1, pch=10,col='red'
)
win.graph()
PlotOnStaticMap(mymap,
lat=37.501246,
lon = 127.039459 ,
destfile = 'mymap_point.jpg',
cex=1, pch=10,col='red'
)
jpeg(filename = "mypoint.jpg", width = 680, height = 680, quality = 100)
p<-PlotOnStaticMap(mymap,
lat=37.501246,
lon = 127.039459 ,
cex=1, pch=10,col='red'
)
print(p);
dev.off()
jpeg(filename = "mypoint.jpg", width = 680, height = 680, quality = 100)
mydata<-data.frame(
a=c(1:5),
lat=c(37.504273,37.506026,37.513341,37.533341,37.543341),
lon=c(127.047781,127.046156,127.033690,127.053690,127.073690)
)
p<-PlotOnStaticMap(mymap,
lat=mydata$lat,
lon = mydata$lon ,
cex=1, pch=10,col='red'
)
print(p);
dev.off()
library(RgoogleMaps)
df<-read.csv("seoul.csv")
df
library(RgoogleMaps)
df<-read.csv("seoul.csv")
library(readxl)
df<-read.csv("seoul.csv")
df<-read.csv("seoul.csv")
library(RgoogleMaps)
library(readxl)
library(RgoogleMaps)
library(readxl)
df<-read.csv("seoul.csv")
df
mycenter=c(mean(df$lat),mean(df$lon))
mycenter<-c(mean(df$lat),mean(df$lon))
mycenter
mymap<-GetMap(
center = mycenter,
zoom = 11,
maptype = 'load',
format = 'roadmap',
destfile = 'mymap2.jpg'
)
jpeg(filename = "mypoint2.jpg", width = 680, height = 680, quality = 100)
mydata<-data.frame(
a=c(1:166),
lat=c(df$lat),
lon=c(df$lon)
)
p<-PlotOnStaticMap(mymap,
lat=mydata$lat,
lon = mydata$lon ,
cex=1, pch=10,col='red'
)
print(p);
dev.off()
kt<-data.frame(df,df$type==kt)
kt<-data.frame(df,df$type==KT)
kt %>% filter(type==KT)
library(dplyr)
kt %>% filter(type==KT)
kt<-data.frame()
kt %>% filter(type==KT)
kt
kt<-read.csv("seoul.csv")
kt %>% filter(type==KT)
kt %>% filter(type=KT)
kt
kt %>% filter(type == KT)
kt %>% filter(type == KT)
kt %>% filter(type == KT)
kt %>% filter(type == KT)
kt %>% filter(type == KT)
kt %>% filter(type == kt)
kt <- df %>% filter(type=='kt')
kt
kt <- df %>% filter(type=='kt')
kt <- df %>% filter(type==kt)
kt <- df %>% filter(type==kt)
df
kt <- df %>% filter(type==kt)
kt <- df %>% filter(df$type==kt)
kt <- df %>% filter(df$type==kt)
kt <- df %>% filter(df$type=='kt')
kt
kt <- df%>% filter(df$type=='kt')
kt
kt <- df%>%
group_by(type=KT)
df %>% filter(type=kt)
df %>% filter(type==kt)
df %>% filter(type=="kt")
df %>% filter(type=="LGU+")
LG<-df %>% filter(type=="LGU+")
LG
SKT<-df %>% filter(type=="SKT")
SKT
KT<-df %>% filter(type=="KT")
KT
b<-count(KT)
b
KT
b<-n(KT)
b<-count(KT$gu)
b<-count(KT)
summary(KT)
KT
b
LG
SKT
b<-nrow(KT)
b
b<-nrow(SKT)
b<-0
b
b
b<-nrow(SKT)
b
b<-nrow(LG)
b
df2<-data.frame()
source('C:/Rproject/day07/r6.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Rproject/day07/r6.R', encoding = 'UTF-8', echo=TRUE)
wifi(1)
source('C:/Rproject/day07/r6.R', encoding = 'UTF-8', echo=TRUE)
wifi(1)
wifi(2)
source('C:/Rproject/day07/r6.R', encoding = 'UTF-8', echo=TRUE)
wifi(1)
wifi(2)
wifi(3)
